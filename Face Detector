import cv2
from deepface import DeepFace

# Load the pre-trained face detection model
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Initialize the webcam
video_capture = cv2.VideoCapture(0)

# Loop through the frames of the webcam
while True:
    # Read a frame from the webcam
    ret, frame = video_capture.read()

    # Detect faces in the frame
    faces = face_cascade.detectMultiScale(frame, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30),
                                          flags=cv2.CASCADE_SCALE_IMAGE)

    # Loop through the faces
    for (x, y, w, h) in faces:
        # Crop the face from the frame
        face_image = frame[y:y + h, x:x + w]

        # Detect the gender, emotion, and age of the face
        results = DeepFace.analyze(face_image, actions=['gender', 'emotion', 'age'], enforce_detection=False)

        # Loop through the results for each face detected
        for result in results:
            # Get the gender, emotion, and age from the result
            gender = result['gender']
            emotion = result['dominant_emotion']
            age = int(result['age'])

            # Draw a rectangle around the face and display the gender, emotion, and age
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
            cv2.putText(frame, f"{gender}", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0),2)
            cv2.putText(frame, f"{emotion}", (x, y - 25), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0),2)
            cv2.putText(frame, f"{age}", (x, y - 40), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0),2)

    # Display the resulting frame
    cv2.imshow('Video', frame)

    # If the user presses the 'q' key, exit the loop
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the webcam and close the window
video_capture.release()
cv2.destroyAllWindows()
